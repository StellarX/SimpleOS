[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_io_sti
	EXTERN	_fifo32_init
	EXTERN	_init_pit
	EXTERN	_init_keyboard
	EXTERN	_enable_mouse
	EXTERN	_io_out8
	EXTERN	_memtest
	EXTERN	_memman_init
	EXTERN	_memman_free
	EXTERN	_init_palette
	EXTERN	_shtctl_init
	EXTERN	_task_init
	EXTERN	_task_run
	EXTERN	_sheet_alloc
	EXTERN	_memman_alloc_4k
	EXTERN	_sheet_setbuf
	EXTERN	_init_screen8
	EXTERN	_init_mouse_cursor8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_fifo32_put
	EXTERN	_fifo32_status
	EXTERN	_io_cli
	EXTERN	_fifo32_get
	EXTERN	_taskctl
	EXTERN	_mouse_decode
	EXTERN	_cons_putstr0
	EXTERN	_asm_end_app
	EXTERN	_keytable0.0
	EXTERN	_wait_KBC_sendready
	EXTERN	_keytable1.1
	EXTERN	_task_sleep
	EXTERN	_change_wtitle8
	EXTERN	_task_alloc
	EXTERN	_console_task
	EXTERN	_make_window8
	EXTERN	_make_textbox8
	EXTERN	_memman_free_4k
	EXTERN	_sheet_free
[FILE "bootpack.c"]
[SECTION .data]
_keytable0.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	94
	DB	8
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	64
	DB	91
	DB	10
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	58
	DB	0
	DB	0
	DB	93
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	34
	DB	35
	DB	36
	DB	37
	DB	38
	DB	39
	DB	40
	DB	41
	DB	126
	DB	61
	DB	126
	DB	8
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	96
	DB	123
	DB	10
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	43
	DB	42
	DB	0
	DB	0
	DB	125
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
LC1:
	DB	0x0A,"Break(mouse) :",0x0A,0x00
LC0:
	DB	0x0A,"Break(key) :",0x0A,0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,1104
	MOV	DWORD [-1048+EBP],-1
	MOV	DWORD [-1052+EBP],0
	MOV	DWORD [-1056+EBP],2147483647
	MOV	DWORD [-1060+EBP],0
	MOV	DWORD [-1072+EBP],0
	MOV	AL,BYTE [4081]
	SAR	AL,4
	MOV	EDX,EAX
	AND	EDX,7
	MOV	DWORD [-1076+EBP],EDX
	MOV	DWORD [-1080+EBP],-1
	MOV	DWORD [-1092+EBP],-1
	MOV	DWORD [-1096+EBP],-1
	MOV	DWORD [-1100+EBP],0
	MOV	DWORD [-1104+EBP],0
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-588+EBP]
	PUSH	0
	PUSH	EAX
	LEA	EAX,DWORD [-44+EBP]
	PUSH	128
	PUSH	EAX
	CALL	_fifo32_init
	LEA	EDX,DWORD [-76+EBP]
	PUSH	0
	LEA	EAX,DWORD [-716+EBP]
	PUSH	EAX
	PUSH	32
	PUSH	EDX
	CALL	_fifo32_init
	ADD	ESP,32
	CALL	_init_pit
	LEA	EAX,DWORD [-44+EBP]
	PUSH	256
	PUSH	EAX
	CALL	_init_keyboard
	LEA	EDX,DWORD [-44+EBP]
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EDX
	CALL	_enable_mouse
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	ADD	ESP,36
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	3932160
	MOV	DWORD [-1064+EBP],EAX
	CALL	_memman_init
	PUSH	647168
	PUSH	4096
	PUSH	3932160
	CALL	_memman_free
	MOV	EAX,DWORD [-1064+EBP]
	SUB	EAX,4194304
	PUSH	EAX
	PUSH	4194304
	PUSH	3932160
	CALL	_memman_free
	ADD	ESP,36
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctl_init
	PUSH	3932160
	MOV	DWORD [-1068+EBP],EAX
	CALL	_task_init
	PUSH	0
	PUSH	1
	MOV	DWORD [-1088+EBP],EAX
	PUSH	EAX
	MOV	DWORD [-20+EBP],EAX
	CALL	_task_run
	ADD	ESP,32
	MOV	EAX,DWORD [-1068+EBP]
	MOV	DWORD [4068],EAX
	PUSH	EAX
	CALL	_sheet_alloc
	MOV	ESI,EAX
	MOVSX	EDX,WORD [4086]
	MOVSX	EAX,WORD [4084]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	PUSH	ESI
	CALL	_sheet_setbuf
	ADD	ESP,32
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	LEA	EBX,DWORD [-1036+EBP]
	CALL	_init_screen8
	PUSH	DWORD [-1064+EBP]
	PUSH	DWORD [-1068+EBP]
	CALL	_open_console
	PUSH	DWORD [-1068+EBP]
	MOV	EDI,EAX
	CALL	_sheet_alloc
	PUSH	99
	PUSH	16
	MOV	DWORD [-1084+EBP],EAX
	PUSH	16
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	ADD	ESP,44
	PUSH	99
	PUSH	EBX
	MOV	EBX,2
	CALL	_init_mouse_cursor8
	MOVSX	EAX,WORD [4084]
	LEA	ECX,DWORD [-16+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	MOV	DWORD [-1040+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	0
	LEA	ECX,DWORD [-44+EAX]
	PUSH	0
	MOV	EAX,ECX
	PUSH	ESI
	CDQ
	IDIV	EBX
	MOV	DWORD [-1044+EBP],EAX
	CALL	_sheet_slide
	PUSH	4
	PUSH	32
	PUSH	EDI
	CALL	_sheet_slide
	ADD	ESP,32
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1040+EBP]
	PUSH	DWORD [-1084+EBP]
	CALL	_sheet_slide
	PUSH	0
	PUSH	ESI
	CALL	_sheet_updown
	PUSH	1
	PUSH	EDI
	CALL	_sheet_updown
	PUSH	2
	PUSH	DWORD [-1084+EBP]
	CALL	_sheet_updown
	ADD	ESP,36
	PUSH	EDI
	CALL	_keywin_on
	LEA	EDX,DWORD [-76+EBP]
	PUSH	237
	PUSH	EDX
	CALL	_fifo32_put
	LEA	EAX,DWORD [-76+EBP]
	PUSH	DWORD [-1076+EBP]
	PUSH	EAX
	CALL	_fifo32_put
	ADD	ESP,20
	LEA	EDX,DWORD [-44+EBP]
	MOV	DWORD [4076],EDX
L2:
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JLE	L5
	CMP	DWORD [-1080+EBP],0
	JS	L79
L5:
	LEA	EBX,DWORD [-44+EBP]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	ESI
	TEST	EAX,EAX
	JE	L80
	PUSH	EBX
	CALL	_fifo32_get
	MOV	ESI,EAX
	CALL	_io_sti
	POP	EBX
	TEST	EDI,EDI
	JE	L12
	CMP	DWORD [28+EDI],0
	JNE	L12
	MOV	EDX,DWORD [-1068+EBP]
	XOR	EDI,EDI
	MOV	EAX,DWORD [16+EDX]
	CMP	EAX,1
	JE	L12
	MOV	EDX,DWORD [-1068+EBP]
	MOV	EDI,DWORD [16+EDX+EAX*4]
	PUSH	EDI
	CALL	_keywin_on
	POP	ECX
L12:
	LEA	EAX,DWORD [-256+ESI]
	CMP	EAX,255
	JBE	L81
	LEA	EAX,DWORD [-512+ESI]
	CMP	EAX,255
	JBE	L82
	LEA	EAX,DWORD [-768+ESI]
	CMP	EAX,255
	JBE	L83
	LEA	EAX,DWORD [-1024+ESI]
	CMP	EAX,999
	JA	L2
	IMUL	ESI,ESI,160
	ADD	ESI,DWORD [_taskctl]
	LEA	EAX,DWORD [-159752+ESI]
	PUSH	EAX
	CALL	_close_constask
L72:
	POP	EAX
	JMP	L2
L83:
	IMUL	EAX,ESI,40
	MOV	EDX,DWORD [-1068+EBP]
	LEA	EAX,DWORD [-29676+EAX+EDX*1]
	PUSH	EAX
	CALL	_close_console
	JMP	L72
L82:
	MOV	EDX,ESI
	MOVZX	EAX,DL
	PUSH	EAX
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	EDX
	POP	ECX
	TEST	EAX,EAX
	JE	L2
	MOV	EAX,DWORD [-772+EBP]
	MOV	EDX,DWORD [-776+EBP]
	ADD	DWORD [-1044+EBP],EAX
	ADD	DWORD [-1040+EBP],EDX
	JS	L84
L44:
	CMP	DWORD [-1044+EBP],0
	JS	L85
L45:
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	CMP	DWORD [-1040+EBP],EAX
	JLE	L46
	MOV	DWORD [-1040+EBP],EAX
L46:
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	CMP	DWORD [-1044+EBP],EAX
	JLE	L47
	MOV	DWORD [-1044+EBP],EAX
L47:
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1040+EBP]
	PUSH	DWORD [-1084+EBP]
	CALL	_sheet_slide
	ADD	ESP,12
	MOV	EAX,DWORD [-1040+EBP]
	MOV	EDX,DWORD [-1044+EBP]
	MOV	DWORD [-1048+EBP],EAX
	MOV	DWORD [-1052+EBP],EDX
	TEST	DWORD [-768+EBP],1
	JNE	L86
	MOV	DWORD [-1092+EBP],-1
	CMP	DWORD [-1056+EBP],2147483647
	JE	L2
L74:
	PUSH	DWORD [-1060+EBP]
	PUSH	DWORD [-1056+EBP]
	PUSH	DWORD [-1104+EBP]
	CALL	_sheet_slide
	MOV	DWORD [-1056+EBP],2147483647
L75:
	ADD	ESP,12
	JMP	L2
L86:
	CMP	DWORD [-1092+EBP],0
	JS	L87
	MOV	EBX,DWORD [-1040+EBP]
	MOV	EAX,DWORD [-1100+EBP]
	SUB	EBX,DWORD [-1092+EBP]
	MOV	ESI,DWORD [-1044+EBP]
	SUB	ESI,DWORD [-1096+EBP]
	MOV	EDX,DWORD [-1044+EBP]
	LEA	EBX,DWORD [2+EBX+EAX*1]
	MOV	DWORD [-1096+EBP],EDX
	MOV	DWORD [-1056+EBP],EBX
	ADD	DWORD [-1060+EBP],ESI
	AND	DWORD [-1056+EBP],-4
	JMP	L2
L87:
	MOV	EAX,DWORD [-1068+EBP]
	MOV	EAX,DWORD [16+EAX]
	MOV	DWORD [-1112+EBP],EAX
	MOV	ECX,EAX
L77:
	DEC	ECX
	TEST	ECX,ECX
	JLE	L2
	MOV	EDX,DWORD [-1068+EBP]
	MOV	ESI,DWORD [-1044+EBP]
	MOV	EBX,DWORD [-1040+EBP]
	MOV	EDX,DWORD [20+EDX+ECX*4]
	MOV	DWORD [-1104+EBP],EDX
	SUB	ESI,DWORD [16+EDX]
	SUB	EBX,DWORD [12+EDX]
	JS	L77
	MOV	EAX,DWORD [4+EDX]
	CMP	EBX,EAX
	JGE	L77
	TEST	ESI,ESI
	JS	L77
	CMP	ESI,DWORD [8+EDX]
	JGE	L77
	IMUL	EAX,ESI
	MOV	DWORD [-1116+EBP],EAX
	MOV	EDX,DWORD [EDX]
	MOV	EAX,DWORD [-1116+EBP]
	ADD	EAX,EBX
	MOVZX	EAX,BYTE [EAX+EDX*1]
	MOV	EDX,DWORD [-1104+EBP]
	CMP	EAX,DWORD [20+EDX]
	JE	L77
	MOV	EAX,DWORD [-1112+EBP]
	DEC	EAX
	PUSH	EAX
	PUSH	EDX
	CALL	_sheet_updown
	CMP	DWORD [-1104+EBP],EDI
	POP	ECX
	POP	EAX
	JE	L56
	PUSH	EDI
	CALL	_keywin_off
	MOV	EDI,DWORD [-1104+EBP]
	PUSH	EDI
	CALL	_keywin_on
	POP	EAX
	POP	EDX
L56:
	CMP	EBX,2
	JLE	L57
	MOV	EDX,DWORD [-1104+EBP]
	MOV	EAX,DWORD [4+EDX]
	SUB	EAX,3
	CMP	EBX,EAX
	JGE	L57
	CMP	ESI,2
	JLE	L57
	CMP	ESI,20
	JG	L57
	MOV	EAX,DWORD [-1040+EBP]
	MOV	EDX,DWORD [-1044+EBP]
	MOV	DWORD [-1092+EBP],EAX
	MOV	DWORD [-1096+EBP],EDX
	MOV	EAX,DWORD [-1104+EBP]
	MOV	EDX,DWORD [-1104+EBP]
	MOV	EAX,DWORD [12+EAX]
	MOV	EDX,DWORD [16+EDX]
	MOV	DWORD [-1100+EBP],EAX
	MOV	DWORD [-1060+EBP],EDX
L57:
	MOV	EAX,DWORD [-1104+EBP]
	MOV	EDX,DWORD [4+EAX]
	LEA	EAX,DWORD [-21+EDX]
	CMP	EAX,EBX
	JG	L2
	LEA	EAX,DWORD [-5+EDX]
	CMP	EBX,EAX
	JGE	L2
	CMP	ESI,4
	JLE	L2
	CMP	ESI,18
	JG	L2
	MOV	EDX,DWORD [-1104+EBP]
	TEST	BYTE [28+EDX],16
	JE	L88
	MOV	EAX,DWORD [-1104+EBP]
	MOV	EBX,DWORD [36+EAX]
	PUSH	LC1
	PUSH	DWORD [148+EBX]
	CALL	_cons_putstr0
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_asm_end_app
L78:
	CALL	_io_sti
L73:
	POP	EDX
	POP	ECX
	JMP	L2
L88:
	MOV	EBX,DWORD [36+EDX]
	CALL	_io_cli
	PUSH	4
	LEA	EAX,DWORD [16+EBX]
	PUSH	EAX
	CALL	_fifo32_put
	JMP	L78
L85:
	MOV	DWORD [-1044+EBP],0
	JMP	L45
L84:
	MOV	DWORD [-1040+EBP],0
	JMP	L44
L81:
	CMP	ESI,343
	JE	L89
L16:
	CMP	ESI,315
	JE	L90
L17:
	CMP	ESI,316
	JE	L91
L19:
	CMP	ESI,383
	JG	L21
	CMP	DWORD [-1072+EBP],0
	JNE	L22
	MOV	AL,BYTE [_keytable0.0-256+ESI]
L76:
	MOV	BYTE [-764+EBP],AL
L24:
	MOV	DL,BYTE [-764+EBP]
	LEA	EAX,DWORD [-65+EDX]
	CMP	AL,25
	JA	L25
	TEST	DWORD [-1076+EBP],4
	JNE	L70
	CMP	DWORD [-1072+EBP],0
	JE	L27
L25:
	MOV	AL,BYTE [-764+EBP]
	TEST	AL,AL
	JE	L29
	TEST	EDI,EDI
	JE	L29
	MOVSX	EAX,AL
	ADD	EAX,256
	PUSH	EAX
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
L29:
	CMP	ESI,271
	JE	L92
L30:
	CMP	ESI,298
	JE	L93
L32:
	CMP	ESI,310
	JE	L94
L33:
	CMP	ESI,426
	JE	L95
L34:
	CMP	ESI,438
	JE	L96
L35:
	CMP	ESI,314
	JE	L97
L36:
	CMP	ESI,325
	JE	L98
L37:
	CMP	ESI,326
	JE	L99
L38:
	CMP	ESI,506
	JE	L100
L39:
	CMP	ESI,510
	JNE	L2
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1080+EBP]
	PUSH	96
	CALL	_io_out8
	JMP	L73
L100:
	MOV	DWORD [-1080+EBP],-1
	JMP	L39
L99:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	XOR	DWORD [-1076+EBP],1
	CALL	_fifo32_put
	PUSH	DWORD [-1076+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L38
L98:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	XOR	DWORD [-1076+EBP],2
	CALL	_fifo32_put
	PUSH	DWORD [-1076+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L37
L97:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	XOR	DWORD [-1076+EBP],4
	CALL	_fifo32_put
	PUSH	DWORD [-1076+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L36
L96:
	AND	DWORD [-1072+EBP],-3
	JMP	L35
L95:
	AND	DWORD [-1072+EBP],-2
	JMP	L34
L94:
	OR	DWORD [-1072+EBP],2
	JMP	L33
L93:
	OR	DWORD [-1072+EBP],1
	JMP	L32
L92:
	TEST	EDI,EDI
	JE	L30
	PUSH	EDI
	CALL	_keywin_off
	MOV	ECX,DWORD [24+EDI]
	DEC	ECX
	POP	EAX
	JNE	L31
	MOV	EDX,DWORD [-1068+EBP]
	MOV	ECX,DWORD [16+EDX]
	DEC	ECX
L31:
	MOV	EAX,DWORD [-1068+EBP]
	MOV	EDI,DWORD [20+EAX+ECX*4]
	PUSH	EDI
	CALL	_keywin_on
	POP	EBX
	JMP	L30
L27:
	LEA	EAX,DWORD [32+EDX]
	MOV	BYTE [-764+EBP],AL
	JMP	L25
L70:
	CMP	DWORD [-1072+EBP],0
	JE	L25
	JMP	L27
L22:
	MOV	AL,BYTE [_keytable1.1-256+ESI]
	JMP	L76
L21:
	MOV	BYTE [-764+EBP],0
	JMP	L24
L91:
	CMP	DWORD [-1072+EBP],0
	JE	L19
	TEST	EDI,EDI
	JE	L20
	PUSH	EDI
	CALL	_keywin_off
	POP	ECX
L20:
	PUSH	DWORD [-1064+EBP]
	PUSH	DWORD [-1068+EBP]
	CALL	_open_console
	PUSH	4
	PUSH	32
	MOV	EDI,EAX
	PUSH	EAX
	CALL	_sheet_slide
	MOV	EAX,DWORD [-1068+EBP]
	PUSH	DWORD [16+EAX]
	PUSH	EDI
	CALL	_sheet_updown
	PUSH	EDI
	CALL	_keywin_on
	ADD	ESP,32
	JMP	L19
L90:
	CMP	DWORD [-1072+EBP],0
	JE	L17
	TEST	EDI,EDI
	JE	L17
	MOV	EBX,DWORD [36+EDI]
	TEST	EBX,EBX
	JE	L17
	CMP	DWORD [52+EBX],0
	JE	L17
	PUSH	LC0
	PUSH	DWORD [148+EBX]
	CALL	_cons_putstr0
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_asm_end_app
	CALL	_io_sti
	POP	EBX
	POP	EAX
	JMP	L17
L89:
	MOV	EDX,DWORD [-1068+EBP]
	MOV	EAX,DWORD [16+EDX]
	CMP	EAX,2
	JLE	L16
	DEC	EAX
	PUSH	EAX
	PUSH	DWORD [24+EDX]
	CALL	_sheet_updown
	POP	EAX
	POP	EDX
	JMP	L16
L80:
	CMP	DWORD [-1048+EBP],0
	JNS	L101
	CMP	DWORD [-1056+EBP],2147483647
	JNE	L102
	PUSH	DWORD [-1088+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	JMP	L72
L102:
	CALL	_io_sti
	JMP	L74
L101:
	CALL	_io_sti
	PUSH	DWORD [-1052+EBP]
	PUSH	DWORD [-1048+EBP]
	PUSH	DWORD [-1084+EBP]
	CALL	_sheet_slide
	MOV	DWORD [-1048+EBP],-1
	JMP	L75
L79:
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1080+EBP],EAX
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1080+EBP]
	PUSH	96
	CALL	_io_out8
	ADD	ESP,12
	JMP	L5
	GLOBAL	_keywin_off
_keywin_off:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	0
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_change_wtitle8
	TEST	BYTE [28+EBX],32
	POP	EAX
	POP	EDX
	JNE	L105
L103:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L105:
	PUSH	3
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L103
	GLOBAL	_keywin_on
_keywin_on:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	1
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_change_wtitle8
	TEST	BYTE [28+EBX],32
	POP	EAX
	POP	EDX
	JNE	L108
L106:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L108:
	PUSH	2
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L106
	GLOBAL	_open_constask
_open_constask:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	CALL	_task_alloc
	PUSH	512
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memman_alloc_4k
	PUSH	65536
	PUSH	3932160
	MOV	ESI,EAX
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [8+EBP]
	MOV	DWORD [76+EBX],_console_task
	MOV	DWORD [156+EBX],EAX
	ADD	EAX,65524
	MOV	DWORD [100+EBX],EAX
	MOV	DWORD [116+EBX],8
	MOV	DWORD [120+EBX],16
	MOV	DWORD [124+EBX],8
	MOV	DWORD [128+EBX],8
	MOV	DWORD [132+EBX],8
	MOV	DWORD [136+EBX],8
	MOV	DWORD [4+EAX],EDX
	MOV	EDX,DWORD [100+EBX]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [8+EDX],EAX
	PUSH	2
	PUSH	2
	PUSH	EBX
	CALL	_task_run
	LEA	EAX,DWORD [16+EBX]
	PUSH	EBX
	PUSH	ESI
	PUSH	128
	PUSH	EAX
	CALL	_fifo32_init
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
[SECTION .data]
LC2:
	DB	"console",0x00
[SECTION .text]
	GLOBAL	_open_console
_open_console:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_sheet_alloc
	PUSH	42240
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memman_alloc_4k
	PUSH	-1
	PUSH	165
	MOV	ESI,EAX
	PUSH	256
	PUSH	EAX
	PUSH	EBX
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	0
	PUSH	LC2
	PUSH	165
	PUSH	256
	PUSH	ESI
	CALL	_make_window8
	PUSH	0
	PUSH	128
	PUSH	240
	PUSH	28
	PUSH	8
	PUSH	EBX
	CALL	_make_textbox8
	ADD	ESP,44
	PUSH	DWORD [12+EBP]
	PUSH	EBX
	CALL	_open_constask
	OR	DWORD [28+EBX],32
	MOV	DWORD [36+EBX],EAX
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_close_constask
_close_constask:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_task_sleep
	PUSH	65536
	PUSH	DWORD [156+EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	512
	PUSH	DWORD [16+EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	MOV	DWORD [4+EBX],0
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_close_console
_close_console:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	ESI,DWORD [36+EBX]
	PUSH	42240
	PUSH	DWORD [EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	EBX
	CALL	_sheet_free
	MOV	DWORD [8+EBP],ESI
	ADD	ESP,16
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_close_constask
