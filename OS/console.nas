[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_task_now
	EXTERN	_memman_alloc_4k
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_file_readfat
	EXTERN	_io_cli
	EXTERN	_fifo32_status
	EXTERN	_fifo32_get
	EXTERN	_io_sti
	EXTERN	_boxfill8
	EXTERN	_sheet_refresh
	EXTERN	_task_sleep
	EXTERN	_putfonts8_asc_sht
	EXTERN	_memman_total
	EXTERN	_sprintf
	EXTERN	_file_search
	EXTERN	_file_loadfile
	EXTERN	_memman_free_4k
	EXTERN	_set_segmdesc
	EXTERN	_start_app
	EXTERN	_timer_cancelall
	EXTERN	_sheet_free
	EXTERN	_io_in8
	EXTERN	_io_out8
	EXTERN	_timer_free
	EXTERN	_memman_free
	EXTERN	_memman_alloc
	EXTERN	_memman_init
	EXTERN	_putfonts8_asc
	EXTERN	_sheet_alloc
	EXTERN	_sheet_setbuf
	EXTERN	_make_window8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_timer_cancel
	EXTERN	_fifo32_put
[FILE "console.c"]
[SECTION .text]
	GLOBAL	_console_task
_console_task:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-44+EBP]
	SUB	ESP,72
	CALL	_task_now
	PUSH	11520
	MOV	EDI,EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	MOV	DWORD [148+EDI],EBX
	MOV	DWORD [-40+EBP],8
	MOV	DWORD [-80+EBP],EAX
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [-44+EBP],EAX
	MOV	DWORD [-36+EBP],28
	MOV	DWORD [-32+EBP],-1
	CALL	_timer_alloc
	LEA	EDX,DWORD [16+EDI]
	PUSH	1
	PUSH	EDX
	MOV	DWORD [-28+EBP],EAX
	PUSH	EAX
	CALL	_timer_init
	PUSH	50
	PUSH	DWORD [-28+EBP]
	CALL	_timer_settime
	PUSH	1049088
	PUSH	DWORD [-80+EBP]
	CALL	_file_readfat
	ADD	ESP,36
	PUSH	1
	PUSH	62
	PUSH	EBX
	CALL	_cons_putchar
	ADD	ESP,12
L2:
	LEA	EBX,DWORD [16+EDI]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L25
	PUSH	EBX
	CALL	_fifo32_get
	MOV	ESI,EAX
	CALL	_io_sti
	POP	EAX
	CMP	ESI,1
	JLE	L26
L7:
	CMP	ESI,2
	JE	L27
L12:
	CMP	ESI,3
	JE	L28
L13:
	CMP	ESI,4
	JE	L29
L14:
	LEA	EBX,DWORD [-256+ESI]
	MOV	DWORD [-84+EBP],EBX
	CMP	EBX,255
	JA	L15
	CMP	ESI,264
	JE	L30
	CMP	ESI,266
	JE	L31
	MOV	ECX,DWORD [-40+EBP]
	CMP	ECX,239
	JG	L15
	MOV	EAX,ECX
	MOV	EDX,8
	MOV	EBX,EDX
	PUSH	1
	CDQ
	IDIV	EBX
	MOV	ECX,EAX
	MOV	EAX,ESI
	MOV	BYTE [-78+EBP+ECX*1],AL
	LEA	EAX,DWORD [-44+EBP]
	PUSH	DWORD [-84+EBP]
	PUSH	EAX
L23:
	CALL	_cons_putchar
L24:
	ADD	ESP,12
L15:
	CMP	DWORD [-32+EBP],0
	JS	L22
	MOV	ECX,DWORD [-36+EBP]
	MOV	EDX,DWORD [-40+EBP]
	LEA	EAX,DWORD [15+ECX]
	PUSH	EAX
	LEA	EAX,DWORD [7+EDX]
	PUSH	EAX
	PUSH	ECX
	MOV	ECX,DWORD [8+EBP]
	PUSH	EDX
	MOVZX	EAX,BYTE [-32+EBP]
	PUSH	EAX
	PUSH	DWORD [4+ECX]
	PUSH	DWORD [ECX]
	CALL	_boxfill8
	ADD	ESP,28
L22:
	MOV	ECX,DWORD [-36+EBP]
	MOV	EDX,DWORD [-40+EBP]
	LEA	EAX,DWORD [16+ECX]
	PUSH	EAX
	LEA	EAX,DWORD [8+EDX]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [8+EBP]
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L2
L31:
	PUSH	0
	LEA	EBX,DWORD [-44+EBP]
	PUSH	32
	PUSH	EBX
	CALL	_cons_putchar
	PUSH	EBX
	MOV	EAX,DWORD [-40+EBP]
	MOV	EDX,8
	MOV	ECX,EDX
	CDQ
	IDIV	ECX
	MOV	BYTE [-78+EBP+EAX*1],0
	CALL	_cons_newline
	LEA	EAX,DWORD [-76+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [-80+EBP]
	PUSH	EBX
	PUSH	EAX
	CALL	_cons_runcmd
	ADD	ESP,32
	PUSH	1
	PUSH	62
	PUSH	EBX
	JMP	L23
L30:
	CMP	DWORD [-40+EBP],16
	JLE	L15
	PUSH	0
	LEA	EAX,DWORD [-44+EBP]
	PUSH	32
	PUSH	EAX
	CALL	_cons_putchar
	SUB	DWORD [-40+EBP],8
	JMP	L24
L29:
	PUSH	DWORD [-80+EBP]
	LEA	EAX,DWORD [-44+EBP]
	PUSH	EAX
	CALL	_cmd_exit
	POP	EAX
	POP	EDX
	JMP	L14
L28:
	MOV	ECX,DWORD [-36+EBP]
	MOV	EDX,DWORD [-40+EBP]
	LEA	EAX,DWORD [15+ECX]
	PUSH	EAX
	LEA	EAX,DWORD [7+EDX]
	PUSH	EAX
	PUSH	ECX
	MOV	ECX,DWORD [8+EBP]
	PUSH	EDX
	PUSH	0
	PUSH	DWORD [4+ECX]
	PUSH	DWORD [ECX]
	CALL	_boxfill8
	ADD	ESP,28
	MOV	DWORD [-32+EBP],-1
	JMP	L13
L27:
	MOV	DWORD [-32+EBP],7
	JMP	L12
L26:
	TEST	ESI,ESI
	JE	L8
	PUSH	0
	PUSH	EBX
	PUSH	DWORD [-28+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-32+EBP],0
	JS	L10
	MOV	DWORD [-32+EBP],7
L10:
	PUSH	50
	PUSH	DWORD [-28+EBP]
	CALL	_timer_settime
	POP	ECX
	POP	EBX
	JMP	L7
L8:
	PUSH	1
	PUSH	EBX
	PUSH	DWORD [-28+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-32+EBP],0
	JS	L10
	MOV	DWORD [-32+EBP],0
	JMP	L10
L25:
	PUSH	EDI
	CALL	_task_sleep
	CALL	_io_sti
	POP	EAX
	JMP	L2
[SECTION .data]
LC0:
	DB	" ",0x00
[SECTION .text]
	GLOBAL	_cons_putchar
_cons_putchar:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	MOV	DL,BYTE [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	BYTE [-7+EBP],DL
	MOV	BYTE [-6+EBP],AL
	CMP	AL,9
	MOV	BYTE [-5+EBP],0
	JE	L34
	CMP	AL,10
	JE	L46
	CMP	AL,13
	JE	L32
	PUSH	1
	LEA	EAX,DWORD [-6+EBP]
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [8+EBX]
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
	CMP	BYTE [-7+EBP],0
	JE	L32
	MOV	EAX,DWORD [4+EBX]
	ADD	EAX,8
	MOV	DWORD [4+EBX],EAX
	CMP	EAX,248
	JE	L46
L32:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L46:
	PUSH	EBX
	CALL	_cons_newline
	POP	ECX
	JMP	L32
L34:
	PUSH	1
	PUSH	LC0
	PUSH	0
	PUSH	7
	PUSH	DWORD [8+EBX]
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
	MOV	EAX,DWORD [4+EBX]
	ADD	EAX,8
	MOV	DWORD [4+EBX],EAX
	CMP	EAX,248
	JE	L47
L37:
	MOV	EAX,DWORD [4+EBX]
	SUB	EAX,8
	AND	EAX,31
	JNE	L34
	JMP	L32
L47:
	PUSH	EBX
	CALL	_cons_newline
	POP	EAX
	JMP	L37
	GLOBAL	_cons_putstr0
_cons_putstr0:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	CMP	BYTE [EBX],0
	JNE	L53
L55:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L53:
	PUSH	1
	MOVSX	EAX,BYTE [EBX]
	PUSH	EAX
	INC	EBX
	PUSH	ESI
	CALL	_cons_putchar
	ADD	ESP,12
	CMP	BYTE [EBX],0
	JNE	L53
	JMP	L55
	GLOBAL	_cons_putstr1
_cons_putstr1:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [16+EBP]
	XOR	EBX,EBX
	MOV	EDI,DWORD [12+EBP]
	CMP	EBX,ESI
	JL	L61
L63:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L61:
	PUSH	1
	MOVSX	EAX,BYTE [EBX+EDI*1]
	PUSH	EAX
	INC	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putchar
	ADD	ESP,12
	CMP	EBX,ESI
	JL	L61
	JMP	L63
	GLOBAL	_cons_newline
_cons_newline:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [EAX]
	MOV	DWORD [-16+EBP],EAX
	MOV	EAX,DWORD [8+EDX]
	CMP	EAX,139
	JG	L65
	ADD	EAX,16
	MOV	DWORD [8+EDX],EAX
L66:
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [4+EAX],8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L65:
	MOV	EDI,28
L76:
	MOV	ESI,8
L75:
	MOV	EAX,DWORD [-16+EBP]
	MOV	EDX,EDI
	MOV	ECX,DWORD [4+EAX]
	MOV	EBX,DWORD [EAX]
	LEA	EAX,DWORD [16+EDI]
	IMUL	EAX,ECX
	IMUL	EDX,ECX
	LEA	EAX,DWORD [EAX+ESI*1]
	LEA	EDX,DWORD [EDX+ESI*1]
	INC	ESI
	MOV	AL,BYTE [EAX+EBX*1]
	CMP	ESI,247
	MOV	BYTE [EDX+EBX*1],AL
	JLE	L75
	INC	EDI
	CMP	EDI,139
	JLE	L76
	MOV	EDI,140
L86:
	MOV	ESI,8
L85:
	MOV	EDX,DWORD [-16+EBP]
	MOV	EAX,EDI
	MOV	ECX,EDX
	IMUL	EAX,DWORD [4+EDX]
	MOV	EDX,DWORD [EDX]
	LEA	EAX,DWORD [EAX+ESI*1]
	INC	ESI
	CMP	ESI,247
	MOV	BYTE [EAX+EDX*1],0
	JLE	L85
	INC	EDI
	CMP	EDI,155
	JLE	L86
	PUSH	156
	PUSH	248
	PUSH	28
	PUSH	8
	PUSH	ECX
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L66
[SECTION .data]
LC1:
	DB	"mem",0x00
LC2:
	DB	"cls",0x00
LC3:
	DB	"dir",0x00
LC4:
	DB	"type ",0x00
LC5:
	DB	"exit",0x00
LC6:
	DB	"Bad command.",0x0A,0x0A,0x00
[SECTION .text]
	GLOBAL	_cons_runcmd
_cons_runcmd:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,LC1
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [8+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	DWORD [-24+EBP],EAX
	MOV	DWORD [-16+EBP],ECX
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [-24+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EBX,DWORD [12+EBP]
	MOV	EAX,4
	CLD
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L108
	MOV	EAX,4
	MOV	ESI,DWORD [-24+EBP]
	CLD
	MOV	EDI,LC2
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L109
	MOV	EAX,4
	MOV	ESI,DWORD [-24+EBP]
	CLD
	MOV	EDI,LC3
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L110
	MOV	EAX,5
	MOV	ESI,DWORD [-24+EBP]
	CLD
	MOV	EDI,LC4
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L111
	MOV	EAX,5
	MOV	ESI,DWORD [-24+EBP]
	CLD
	MOV	EDI,LC5
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L112
	MOV	ECX,DWORD [-24+EBP]
	CMP	BYTE [ECX],0
	JNE	L113
L95:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L113:
	PUSH	ECX
	PUSH	DWORD [-16+EBP]
	PUSH	EBX
	CALL	_cmd_app
	ADD	ESP,12
	TEST	EAX,EAX
	JNE	L95
	MOV	DWORD [12+EBP],LC6
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cons_putstr0
L112:
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_exit
L111:
	MOV	EAX,DWORD [-24+EBP]
	MOV	ECX,DWORD [-16+EBP]
	MOV	DWORD [16+EBP],EAX
	MOV	DWORD [12+EBP],ECX
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_type
L110:
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_dir
L109:
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_cls
L108:
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_mem
[SECTION .data]
LC7:
	DB	"total   %dMB",0x0A,"free %dKB",0x0A,0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_mem
_cmd_mem:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	SUB	ESP,64
	PUSH	3932160
	CALL	_memman_total
	MOV	EDX,1048576
	SHR	EAX,10
	MOV	EBX,EDX
	MOV	DWORD [ESP],EAX
	MOV	EAX,DWORD [12+EBP]
	CDQ
	IDIV	EBX
	PUSH	EAX
	LEA	EBX,DWORD [-68+EBP]
	PUSH	LC7
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_cmd_cls
_cmd_cls:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,28
	MOV	EDI,DWORD [8+EBP]
	PUSH	EBX
	MOV	EBX,DWORD [EDI]
L125:
	MOV	ECX,8
L124:
	MOV	EAX,ESI
	MOV	EDX,DWORD [EBX]
	IMUL	EAX,DWORD [4+EBX]
	LEA	EAX,DWORD [EAX+ECX*1]
	INC	ECX
	CMP	ECX,247
	MOV	BYTE [EAX+EDX*1],0
	JLE	L124
	INC	ESI
	CMP	ESI,155
	JLE	L125
	PUSH	156
	PUSH	248
	PUSH	28
	PUSH	8
	PUSH	EBX
	CALL	_sheet_refresh
	MOV	DWORD [8+EDI],28
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
LC8:
	DB	"filename.ext   %7d",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_dir
_cmd_dir:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	XOR	EBX,EBX
	SUB	ESP,32
	MOV	EDI,DWORD [8+EBP]
L143:
	MOV	AL,BYTE [1058304+EBX]
	TEST	AL,AL
	JE	L132
	CMP	AL,-27
	JE	L133
	TEST	BYTE [1058315+EBX],24
	JE	L147
L133:
	INC	ESI
	ADD	EBX,32
	CMP	ESI,223
	JLE	L143
L132:
	PUSH	EDI
	CALL	_cons_newline
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L147:
	PUSH	DWORD [1058332+EBX]
	PUSH	LC8
	LEA	EAX,DWORD [-44+EBP]
	PUSH	EAX
	CALL	_sprintf
	LEA	EDX,DWORD [1058304+EBX]
	XOR	ECX,ECX
	ADD	ESP,12
L142:
	MOV	AL,BYTE [EDX]
	INC	EDX
	MOV	BYTE [-44+EBP+ECX*1],AL
	INC	ECX
	CMP	ECX,7
	JLE	L142
	MOV	AL,BYTE [1058312+EBX]
	MOV	BYTE [-35+EBP],AL
	MOV	AL,BYTE [1058313+EBX]
	MOV	BYTE [-34+EBP],AL
	MOV	AL,BYTE [1058314+EBX]
	MOV	BYTE [-33+EBP],AL
	LEA	EAX,DWORD [-44+EBP]
	PUSH	EAX
	PUSH	EDI
	CALL	_cons_putstr0
	POP	EAX
	POP	EDX
	JMP	L133
[SECTION .data]
LC9:
	DB	"File not found.",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_type
_cmd_type:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ESI
	MOV	EAX,DWORD [12+EBP]
	MOV	EDI,DWORD [8+EBP]
	MOV	DWORD [-16+EBP],EAX
	PUSH	224
	PUSH	1058304
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,5
	PUSH	EAX
	CALL	_file_search
	ADD	ESP,12
	MOV	ESI,EAX
	TEST	EAX,EAX
	JE	L149
	PUSH	DWORD [28+EAX]
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	1064448
	PUSH	DWORD [-16+EBP]
	PUSH	EAX
	MOV	EBX,EAX
	PUSH	DWORD [28+ESI]
	MOVZX	EAX,WORD [26+ESI]
	PUSH	EAX
	CALL	_file_loadfile
	PUSH	DWORD [28+ESI]
	PUSH	EBX
	PUSH	EDI
	CALL	_cons_putstr1
	ADD	ESP,40
	PUSH	DWORD [28+ESI]
	PUSH	EBX
	PUSH	3932160
	CALL	_memman_free_4k
	ADD	ESP,12
L150:
	MOV	DWORD [8+EBP],EDI
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cons_newline
L149:
	PUSH	LC9
	PUSH	EDI
	CALL	_cons_putstr0
	POP	ECX
	POP	EBX
	JMP	L150
[SECTION .data]
LC10:
	DB	"Hari",0x00
LC11:
	DB	".hrb file format error.",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_app
_cmd_app:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	XOR	EBX,EBX
	SUB	ESP,60
	MOV	ESI,DWORD [16+EBP]
	CALL	_task_now
	MOV	DWORD [-56+EBP],EAX
L157:
	MOV	AL,BYTE [EBX+ESI*1]
	CMP	AL,32
	JLE	L153
	MOV	BYTE [-44+EBP+EBX*1],AL
	INC	EBX
	CMP	EBX,12
	JLE	L157
L153:
	PUSH	224
	LEA	ESI,DWORD [-44+EBP]
	PUSH	1058304
	PUSH	ESI
	MOV	BYTE [-44+EBP+EBX*1],0
	CALL	_file_search
	ADD	ESP,12
	TEST	EAX,EAX
	MOV	DWORD [-48+EBP],EAX
	JE	L179
L178:
	MOV	EAX,DWORD [-48+EBP]
	PUSH	DWORD [28+EAX]
	PUSH	3932160
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [-48+EBP]
	PUSH	1064448
	PUSH	DWORD [12+EBP]
	PUSH	EAX
	MOV	DWORD [-72+EBP],EAX
	PUSH	DWORD [28+EDX]
	MOVZX	EAX,WORD [26+EDX]
	PUSH	EAX
	CALL	_file_loadfile
	MOV	EDI,DWORD [-48+EBP]
	ADD	ESP,28
	CMP	DWORD [28+EDI],35
	JBE	L160
	MOV	ESI,DWORD [-72+EBP]
	MOV	EAX,LC10
	CLD
	ADD	ESI,4
	MOV	ECX,4
	MOV	EDI,EAX
	REPE
	CMPSB
	JNE	L160
	MOV	EAX,DWORD [-72+EBP]
	CMP	BYTE [EAX],0
	JE	L180
L160:
	PUSH	LC11
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	POP	EDI
	POP	EAX
L172:
	MOV	EDX,DWORD [-48+EBP]
	PUSH	DWORD [28+EDX]
	PUSH	DWORD [-72+EBP]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	DWORD [8+EBP]
	CALL	_cons_newline
	MOV	EAX,1
L151:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L180:
	MOV	EDX,DWORD [EAX]
	MOV	EDI,DWORD [12+EAX]
	MOV	ESI,DWORD [16+EAX]
	MOV	DWORD [-60+EBP],EDX
	MOV	EAX,DWORD [20+EAX]
	MOV	DWORD [-64+EBP],EDI
	PUSH	EDX
	MOV	DWORD [-68+EBP],EAX
	PUSH	3932160
	MOV	EBX,8
	CALL	_memman_alloc_4k
	MOV	EDI,DWORD [-48+EBP]
	MOV	EDX,DWORD [-56+EBP]
	MOV	DWORD [-52+EBP],EAX
	MOV	DWORD [152+EDX],EAX
	PUSH	16634
	PUSH	DWORD [-72+EBP]
	MOV	EAX,DWORD [28+EDI]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [EDX]
	CDQ
	IDIV	EBX
	LEA	EAX,DWORD [2563904+EAX*8]
	PUSH	EAX
	CALL	_set_segmdesc
	MOV	EDX,DWORD [-56+EBP]
	PUSH	16626
	MOV	EAX,DWORD [-60+EBP]
	PUSH	DWORD [-52+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [EDX]
	CDQ
	IDIV	EBX
	LEA	EAX,DWORD [2571904+EAX*8]
	PUSH	EAX
	CALL	_set_segmdesc
	ADD	ESP,40
	TEST	ESI,ESI
	JLE	L175
	MOV	ECX,DWORD [-64+EBP]
	MOV	EDX,DWORD [-68+EBP]
	ADD	ECX,DWORD [-52+EBP]
	ADD	EDX,DWORD [-72+EBP]
	MOV	EBX,ESI
L165:
	MOV	AL,BYTE [EDX]
	INC	EDX
	MOV	BYTE [ECX],AL
	INC	ECX
	DEC	EBX
	JNE	L165
L175:
	MOV	EAX,DWORD [-56+EBP]
	MOV	EDI,DWORD [-56+EBP]
	ADD	EAX,48
	MOV	EBX,255
	PUSH	EAX
	MOV	EAX,DWORD [EDI]
	ADD	EAX,16000
	PUSH	EAX
	PUSH	DWORD [-64+EBP]
	MOV	EAX,DWORD [EDI]
	ADD	EAX,8000
	PUSH	EAX
	PUSH	27
	CALL	_start_app
	MOV	ESI,DWORD [4068]
	ADD	ESP,20
	ADD	ESI,1044
L171:
	MOV	EAX,DWORD [28+ESI]
	AND	EAX,17
	CMP	EAX,17
	JE	L181
L168:
	ADD	ESI,40
	DEC	EBX
	JNS	L171
	MOV	EAX,DWORD [-56+EBP]
	ADD	EAX,16
	PUSH	EAX
	CALL	_timer_cancelall
	PUSH	DWORD [-60+EBP]
	PUSH	DWORD [-52+EBP]
	PUSH	3932160
	CALL	_memman_free_4k
	ADD	ESP,16
	JMP	L172
L181:
	MOV	EAX,DWORD [-56+EBP]
	CMP	DWORD [36+ESI],EAX
	JNE	L168
	PUSH	ESI
	CALL	_sheet_free
	POP	EAX
	JMP	L168
L179:
	CMP	BYTE [-45+EBP+EBX*1],46
	JE	L158
	PUSH	224
	PUSH	1058304
	PUSH	ESI
	MOV	BYTE [-44+EBP+EBX*1],46
	MOV	BYTE [-43+EBP+EBX*1],72
	MOV	BYTE [-42+EBP+EBX*1],82
	MOV	BYTE [-41+EBP+EBX*1],66
	MOV	BYTE [-40+EBP+EBX*1],0
	CALL	_file_search
	ADD	ESP,12
	MOV	DWORD [-48+EBP],EAX
L158:
	CMP	DWORD [-48+EBP],0
	JNE	L178
	XOR	EAX,EAX
	JMP	L151
	GLOBAL	_hrb_api
_hrb_api:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,16
	MOV	EBX,DWORD [28+EBP]
	CALL	_task_now
	MOV	EDX,DWORD [4068]
	CMP	EBX,1
	MOV	DWORD [-16+EBP],EAX
	MOV	EDI,DWORD [152+EAX]
	MOV	EAX,DWORD [148+EAX]
	MOV	DWORD [-24+EBP],EDX
	MOV	DWORD [-20+EBP],EAX
	JE	L246
	CMP	EBX,2
	JE	L247
	CMP	EBX,3
	JE	L248
	CMP	EBX,4
	JE	L249
	CMP	EBX,5
	JE	L250
	CMP	EBX,6
	JE	L251
	CMP	EBX,7
	JE	L252
	CMP	EBX,8
	JE	L253
	CMP	EBX,9
	JE	L254
	CMP	EBX,10
	JE	L255
	CMP	EBX,11
	JE	L256
	CMP	EBX,12
	JE	L257
	CMP	EBX,13
	JE	L258
	CMP	EBX,14
	JE	L259
	CMP	EBX,15
	JE	L216
	CMP	EBX,16
	JE	L260
	CMP	EBX,17
	JE	L261
	CMP	EBX,18
	JE	L262
	CMP	EBX,19
	JE	L263
	CMP	EBX,20
	JE	L264
L184:
	XOR	EAX,EAX
L182:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L264:
	MOV	EDX,DWORD [36+EBP]
	TEST	EDX,EDX
	JNE	L236
	PUSH	97
	CALL	_io_in8
	MOV	EBX,EAX
	AND	EBX,13
	PUSH	EBX
	PUSH	97
	CALL	_io_out8
L238:
	ADD	ESP,12
	JMP	L184
L236:
	MOV	ECX,1193180000
	MOV	ESI,EDX
	MOV	EAX,ECX
	PUSH	182
	CDQ
	IDIV	ESI
	PUSH	67
	MOV	EBX,EAX
	CALL	_io_out8
	MOVZX	EAX,BL
	SAR	EBX,8
	PUSH	EAX
	PUSH	66
	CALL	_io_out8
	PUSH	EBX
	PUSH	66
	CALL	_io_out8
	PUSH	97
	CALL	_io_in8
	MOV	EBX,EAX
	OR	EBX,3
	AND	EBX,15
	PUSH	EBX
	PUSH	97
	CALL	_io_out8
	ADD	ESP,36
	JMP	L184
L263:
	PUSH	DWORD [24+EBP]
	CALL	_timer_free
L239:
	POP	EAX
	JMP	L184
L262:
	PUSH	DWORD [36+EBP]
	PUSH	DWORD [24+EBP]
	CALL	_timer_settime
L241:
	POP	EAX
	POP	EDX
	JMP	L184
L261:
	MOV	EAX,DWORD [36+EBP]
	ADD	EAX,256
	PUSH	EAX
	MOV	EAX,DWORD [-16+EBP]
	ADD	EAX,16
	PUSH	EAX
	PUSH	DWORD [24+EBP]
	CALL	_timer_init
	JMP	L238
L260:
	CALL	_timer_alloc
	MOV	DWORD [68+EBP],EAX
	MOV	BYTE [9+EAX],1
	JMP	L184
L216:
	CALL	_io_cli
	MOV	EAX,DWORD [-16+EBP]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_status
	POP	ESI
	TEST	EAX,EAX
	JNE	L219
	CMP	DWORD [36+EBP],0
	JE	L220
	PUSH	DWORD [-16+EBP]
	CALL	_task_sleep
	POP	EBX
L219:
	MOV	ESI,DWORD [-16+EBP]
	ADD	ESI,16
	PUSH	ESI
	CALL	_fifo32_get
	MOV	EBX,EAX
	CALL	_io_sti
	POP	ECX
	CMP	EBX,1
	JLE	L265
L222:
	CMP	EBX,2
	JE	L266
L223:
	CMP	EBX,3
	JE	L267
L224:
	CMP	EBX,255
	JLE	L216
	LEA	EAX,DWORD [-256+EBX]
	MOV	DWORD [68+EBP],EAX
	JMP	L184
L267:
	MOV	EDX,DWORD [-20+EBP]
	MOV	DWORD [12+EDX],-1
	JMP	L224
L266:
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [12+EAX],7
	JMP	L223
L265:
	PUSH	1
	PUSH	ESI
	MOV	ESI,DWORD [-20+EBP]
	PUSH	DWORD [16+ESI]
	CALL	_timer_init
	PUSH	50
	PUSH	DWORD [16+ESI]
	CALL	_timer_settime
	ADD	ESP,20
	JMP	L222
L220:
	CALL	_io_sti
	MOV	DWORD [68+EBP],-1
	JMP	L184
L259:
	PUSH	DWORD [24+EBP]
	CALL	_sheet_free
	JMP	L239
L258:
	PUSH	DWORD [16+EBP]
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBP]
	MOV	ESI,DWORD [24+EBP]
	PUSH	DWORD [36+EBP]
	AND	ESI,-2
	PUSH	ESI
	CALL	_hrb_api_linewin
	ADD	ESP,24
L245:
	TEST	DWORD [24+EBP],1
	JNE	L184
	MOV	EAX,DWORD [8+EBP]
	INC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	INC	EAX
	PUSH	EAX
	PUSH	DWORD [32+EBP]
	PUSH	DWORD [36+EBP]
L243:
	PUSH	ESI
L240:
	CALL	_sheet_refresh
L242:
	ADD	ESP,20
	JMP	L184
L257:
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBP]
	PUSH	DWORD [36+EBP]
	PUSH	DWORD [24+EBP]
	JMP	L240
L256:
	MOV	ESI,DWORD [24+EBP]
	MOV	EAX,DWORD [8+EBP]
	AND	ESI,-2
	MOV	DL,BYTE [36+EBP]
	IMUL	EAX,DWORD [4+ESI]
	ADD	EAX,DWORD [12+EBP]
	MOV	ECX,DWORD [ESI]
	MOV	BYTE [EAX+ECX*1],DL
	TEST	DWORD [24+EBP],1
	JNE	L184
	MOV	EAX,DWORD [8+EBP]
	INC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	INC	EAX
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	JMP	L243
L255:
	MOV	EAX,DWORD [32+EBP]
	ADD	EAX,15
	AND	EAX,-16
	PUSH	EAX
	MOV	EAX,DWORD [24+EBP]
	PUSH	DWORD [36+EBP]
	ADD	EAX,EDI
	PUSH	EAX
	CALL	_memman_free
	JMP	L238
L254:
	MOV	EAX,DWORD [32+EBP]
	ADD	EAX,15
	AND	EAX,-16
	PUSH	EAX
	MOV	EAX,DWORD [24+EBP]
	ADD	EAX,EDI
	PUSH	EAX
	CALL	_memman_alloc
	MOV	DWORD [68+EBP],EAX
	JMP	L241
L253:
	MOV	EBX,DWORD [24+EBP]
	ADD	EBX,EDI
	PUSH	EBX
	CALL	_memman_init
	AND	DWORD [32+EBP],-16
	PUSH	DWORD [32+EBP]
	PUSH	DWORD [36+EBP]
	PUSH	EBX
	CALL	_memman_free
	ADD	ESP,16
	JMP	L184
L252:
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBP]
	MOV	ESI,DWORD [24+EBP]
	PUSH	DWORD [36+EBP]
	AND	ESI,-2
	MOVZX	EAX,BYTE [16+EBP]
	PUSH	EAX
	PUSH	DWORD [4+ESI]
	PUSH	DWORD [ESI]
	CALL	_boxfill8
	ADD	ESP,28
	JMP	L245
L251:
	MOV	EAX,DWORD [16+EBP]
	MOV	ESI,DWORD [24+EBP]
	ADD	EAX,EDI
	AND	ESI,-2
	PUSH	EAX
	MOVSX	EAX,BYTE [36+EBP]
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [4+ESI]
	PUSH	DWORD [ESI]
	CALL	_putfonts8_asc
	ADD	ESP,24
	TEST	DWORD [24+EBP],1
	JNE	L184
	MOV	ECX,DWORD [12+EBP]
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [32+EBP]
	ADD	EAX,16
	PUSH	EAX
	LEA	EAX,DWORD [ECX+EDX*8]
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	PUSH	ECX
	JMP	L243
L250:
	PUSH	DWORD [-24+EBP]
	CALL	_sheet_alloc
	MOV	EBX,DWORD [24+EBP]
	MOV	ECX,DWORD [-16+EBP]
	ADD	EBX,EDI
	MOV	DWORD [36+EAX],ECX
	MOV	ESI,EAX
	OR	DWORD [28+EAX],16
	PUSH	DWORD [36+EBP]
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	MOV	EAX,DWORD [32+EBP]
	PUSH	0
	ADD	EAX,EDI
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	EBX
	MOV	EBX,2
	CALL	_make_window8
	MOV	ECX,DWORD [-24+EBP]
	MOV	EDX,DWORD [-24+EBP]
	ADD	ESP,44
	MOV	EAX,DWORD [12+EDX]
	SUB	EAX,DWORD [8+EBP]
	CDQ
	IDIV	EBX
	PUSH	EAX
	MOV	EAX,DWORD [8+ECX]
	SUB	EAX,DWORD [12+EBP]
	CDQ
	IDIV	EBX
	AND	EAX,-4
	PUSH	EAX
	PUSH	ESI
	CALL	_sheet_slide
	MOV	EAX,DWORD [-24+EBP]
	PUSH	DWORD [16+EAX]
	PUSH	ESI
	CALL	_sheet_updown
	MOV	DWORD [68+EBP],ESI
	JMP	L242
L249:
	MOV	EAX,DWORD [-16+EBP]
	ADD	EAX,48
	JMP	L182
L248:
	MOV	EAX,DWORD [24+EBP]
	PUSH	DWORD [32+EBP]
	ADD	EAX,EDI
	PUSH	EAX
	PUSH	DWORD [-20+EBP]
	CALL	_cons_putstr1
	JMP	L238
L247:
	MOV	EAX,DWORD [24+EBP]
	ADD	EAX,EDI
	PUSH	EAX
	PUSH	DWORD [-20+EBP]
	CALL	_cons_putstr0
	JMP	L241
L246:
	PUSH	1
	MOVZX	EAX,BYTE [36+EBP]
	PUSH	EAX
	PUSH	DWORD [-20+EBP]
	CALL	_cons_putchar
	JMP	L238
[SECTION .data]
LC12:
	DB	0x0A,"INT 0D :",0x0A," General Protected Exception.",0x0A,0x00
LC13:
	DB	"EIP = %08X",0x0A,0x00
[SECTION .text]
	GLOBAL	_inthandler0d
_inthandler0d:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-44+EBP]
	SUB	ESP,32
	CALL	_task_now
	MOV	ESI,EAX
	MOV	EDI,DWORD [148+EAX]
	ADD	ESI,48
	PUSH	LC12
	PUSH	EDI
	CALL	_cons_putstr0
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [44+EAX]
	PUSH	LC13
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	EDI
	CALL	_cons_putstr0
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	MOV	EAX,ESI
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
LC14:
	DB	0x0A,"INT 0C :",0x0A," Stack Exception.",0x0A,0x00
[SECTION .text]
	GLOBAL	_inthandler0c
_inthandler0c:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-44+EBP]
	SUB	ESP,32
	CALL	_task_now
	MOV	ESI,EAX
	MOV	EDI,DWORD [148+EAX]
	ADD	ESI,48
	PUSH	LC14
	PUSH	EDI
	CALL	_cons_putstr0
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [44+EAX]
	PUSH	LC13
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	EDI
	CALL	_cons_putstr0
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	MOV	EAX,ESI
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_hrb_api_linewin
_hrb_api_linewin:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EBX,DWORD [12+EBP]
	MOV	EAX,DWORD [20+EBP]
	MOV	ECX,EBX
	MOV	EDX,DWORD [24+EBP]
	SAL	ECX,10
	MOV	EDI,EDX
	MOV	DWORD [-16+EBP],ECX
	MOV	ESI,EAX
	MOV	ECX,DWORD [16+EBP]
	SUB	EDI,DWORD [16+EBP]
	SAL	ECX,10
	SUB	ESI,EBX
	MOV	DWORD [-20+EBP],ECX
	JS	L292
L271:
	TEST	EDI,EDI
	JS	L293
L272:
	CMP	ESI,EDI
	JL	L273
	LEA	ECX,DWORD [1+ESI]
	CMP	EBX,EAX
	MOV	ESI,-1024
	JG	L275
	MOV	ESI,1024
L275:
	CMP	DWORD [16+EBP],EDX
	JG	L276
	SUB	EDX,DWORD [16+EBP]
	INC	EDX
L291:
	SAL	EDX,10
	MOV	EAX,EDX
	CDQ
	IDIV	ECX
	MOV	EDI,EAX
L278:
	TEST	ECX,ECX
	JLE	L289
	MOV	EBX,ECX
L287:
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [-20+EBP]
	SAR	EAX,10
	MOV	ECX,DWORD [-16+EBP]
	IMUL	EAX,DWORD [4+EDX]
	SAR	ECX,10
	MOV	DWORD [-24+EBP],ECX
	MOV	ECX,DWORD [EDX]
	ADD	EAX,DWORD [-24+EBP]
	MOV	DL,BYTE [28+EBP]
	MOV	BYTE [EAX+ECX*1],DL
	ADD	DWORD [-16+EBP],ESI
	ADD	DWORD [-20+EBP],EDI
	DEC	EBX
	JNE	L287
L289:
	ADD	ESP,12
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L276:
	SUB	EDX,DWORD [16+EBP]
	DEC	EDX
	JMP	L291
L273:
	LEA	ECX,DWORD [1+EDI]
	CMP	DWORD [16+EBP],EDX
	MOV	EDI,-1024
	JG	L280
	MOV	EDI,1024
L280:
	CMP	EBX,EAX
	JG	L281
	SUB	EAX,EBX
	LEA	EDX,DWORD [1+EAX]
L290:
	SAL	EDX,10
	MOV	EAX,EDX
	CDQ
	IDIV	ECX
	MOV	ESI,EAX
	JMP	L278
L281:
	SUB	EAX,EBX
	LEA	EDX,DWORD [-1+EAX]
	JMP	L290
L293:
	NEG	EDI
	JMP	L272
L292:
	NEG	ESI
	JMP	L271
	GLOBAL	_cmd_exit
_cmd_exit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	EBX,DWORD [8+EBP]
	CALL	_task_now
	MOV	ESI,DWORD [4068]
	MOV	EDI,DWORD [4076]
	PUSH	DWORD [16+EBX]
	MOV	DWORD [-16+EBP],EAX
	CALL	_timer_cancel
	PUSH	11520
	PUSH	DWORD [12+EBP]
	PUSH	3932160
	CALL	_memman_free_4k
	CALL	_io_cli
	MOV	EAX,DWORD [EBX]
	SUB	EAX,ESI
	SUB	EAX,1044
	SAR	EAX,3
	IMUL	EAX,EAX,-858993459
	ADD	EAX,768
	PUSH	EAX
	PUSH	EDI
	CALL	_fifo32_put
	CALL	_io_sti
	ADD	ESP,24
L295:
	PUSH	DWORD [-16+EBP]
	CALL	_task_sleep
	POP	EDI
	JMP	L295
